repositories {
    maven {
        url 'https://jitpack.io'
    }
}

def unimixinsVersion = "0.1.14"

dependencies {
    implementation("com.github.LegacyModdingMC.UniMixins:unimixins-all-1.7.10:$unimixinsVersion:dev")
    annotationProcessor("com.github.LegacyModdingMC.UniMixins:unimixins-all-1.7.10:$unimixinsVersion:dev")
}

// Exclude conflicting transitive dependencies.
// Only needed if you depend on a mod that depends on one of these.
// This may need to be at the end of the build script.

configurations.implementation.dependencies.each {
    if (it instanceof ExternalModuleDependency) {
        it.exclude module: "SpongeMixins"
        it.exclude module: "SpongePoweredMixin"
        it.exclude module: "00gasstation-mc1.7.10"
        it.exclude module: "gtnhmixins"
    }
}

// -- Generic Mixin setup --

runClient {
    args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker")
}

runServer {
    args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker")
}

def outSrgFile = "${tasks.compileJava.temporaryDir}/outSrg.srg"
def outRefMapFile = "${tasks.compileJava.temporaryDir}/mixins.${mod_id}.refmap.json"

jar {
    manifest {
        attributes (
                // This is the regular way of registering Mixin configs.
                // Setting the tweak class allows Mixin to discover your mod.
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                // Mixin will automatically register any configs specified here.
                'MixinConfigs': "mixins.${mod_id}.json",

                // To use the IEarlyMixinLoader interface, an FML plugin needs to be
                // registered.
                // Note: the previous two properties aren't required for the early
                // interface.
                //'FMLCorePlugin': 'io.github.legacymoddingmc.unimixins.example.ExampleCore',

                // If your mod also contains a Forge mod (marked by a @Mod annotation),
                // these need to be set or it will get ignored.
                // Note that a Forge mod is required for late mixins to work.
                //
                // Allow Mixin to discover the Forge mod if FMLCorePluginContainsFMLMod
                // is also set:
                'ForceLoadAsMod': 'true',
                // Allow Forge to discover the Forge mod:
                'FMLCorePluginContainsFMLMod': 'true',
        )
    }

    from outRefMapFile;
}

tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobfJar.srg.get().asFile}", "-AoutSrgFile=${outSrgFile}", "-AoutRefMapFile=${outRefMapFile}"];

reobfJar {
    extraSrgFiles.from(outSrgFile)
}

afterEvaluate {
    File uni = configurations.compileClasspath.findAll { it.name.contains("unimixins-all-") || it.name.contains("unimixins-mixin-") || it.name.contains("unimixins-0.") }.first()
    runClient {
        extraJvmArgs.add(
                '-javaagent:' + uni.getPath()
        )
    }
}